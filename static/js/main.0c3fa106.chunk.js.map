{"version":3,"sources":["QuestionCard.js","Questions.js","SelectionsForm.js","App.js","serviceWorker.js","index.js"],"names":["QuestionCard","question","generateQuestions","operator","firstDigit","secondDigit","changeId","id","className","onClick","firstNum","secondNum","Questions","questions","map","key","answer","Selections","props","state","onSubmit","bind","ev","preventDefault","this","Number","value","onChange","setState","target","Component","App","howMany","firstNumbers","firstStart","secondNumbers","secondStart","i","aQuestion","switchNumber","Math","floor","random","console","log","push","updateQuestions","updateIndex","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c3fa106.chunk.js","sourcesContent":["import React from 'react';\nimport './QuestionCard.css';\n\nconst QuestionCard = ({question, generateQuestions}) => {\n\n    let operator = question.operator;\n    let firstDigit = question.firstDigit;\n    let secondDigit = question.secondDigit;\n    let changeId = question.id;\n\n    return (\n        <div className='questionCard'>\n            <div className='id_replace'>\n                <span className='element questionId'>Q{question.id}</span>\n                <button className='replaceBTN' onClick={()=>generateQuestions(operator,firstDigit,secondDigit,1,changeId)}>Replace</button>\n            </div>\n            <div className='questionBox'>\n                <span className='element firstNum'>{question.firstNum}</span>\n                <span className='element operator_secondNum'>{question.operator +'  '+ question.secondNum}</span>\n            </div> \n        </div>\n    )\n}\n\nexport default QuestionCard;","import React from 'react';\nimport QuestionCard from './QuestionCard';\nimport './Questions.css';\n\nconst Questions = ({questions, generateQuestions}) => {\n    \n    return (\n        <div>\n            <ul className='questionsList'>\n                {\n                questions.map(question => <QuestionCard\n                key={question.id} question={question} generateQuestions={generateQuestions}/>)\n                }\n            </ul>\n            <ul className='answerList'><span>Answers: </span>\n                {\n                questions.map(question => <li className='answers' key={question.id} >\n                    {`Q${question.id}: ${question.answer}`}</li>)\n                }\n            </ul>\n        </div>\n        \n    )\n}\n\nexport default Questions;","import React, { Component } from 'react';\nimport './SelectionsForm.css';\n\nclass Selections extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            operator: '+',\n            firstDigit: 1,\n            secondDigit: 1,\n        }\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onSubmit(ev){\n        ev.preventDefault();\n        let { operator, firstDigit, secondDigit } = this.state;\n        firstDigit = Number(firstDigit);\n        secondDigit = Number(secondDigit);\n        this.props.generateQuestions(operator, firstDigit, secondDigit, 20);\n    }\n\n    render() {\n        const { operator, firstDigit, secondDigit } = this.state;\n        return (\n            <form className='selections' onSubmit={this.onSubmit}>\n                <ul className='selectionsList'>\n                    <label>Operator&nbsp;\n                    <select className='oneSelection' value={operator} \n                    onChange={ ev => this.setState({operator: ev.target.value })} >\n                        <option>+</option>\n                        <option>-</option>\n                        <option>x</option>\n                    </select>\n                    </label>\n                    <label>First Number&nbsp;\n                    <select className='oneSelection' value={firstDigit}\n                    onChange={ ev => this.setState({firstDigit: ev.target.value })}>\n                        <option value='1'>1-Digit</option>\n                        <option value='2'>2-Digit</option>\n                        <option value='3'>3-Digit</option>\n                    </select>\n                    </label>\n                    <label>Second Number&nbsp;\n                    <select className='oneSelection' value={secondDigit}\n                    onChange={ ev => this.setState({secondDigit: ev.target.value })}>\n                        <option value='1'>1-Digit</option>\n                        <option value='2'>2-Digit</option>\n                        <option value='3'>3-Digit</option>\n                    </select>\n                    </label>\n                    <button className='button' >Generate Questions</button>\n                </ul>\n            </form>\n        )\n    }\n}\n\nexport default Selections;","import React, { Component } from 'react';\nimport './App.css';\nimport Questions from './Questions';\nimport Selections from './SelectionsForm';\n\n\nclass App extends Component{\n  constructor() {\n      super();\n      this.state = {\n          questions: [],\n      }    \n      this.generateQuestions = this.generateQuestions.bind(this);\n  }\n\n  generateQuestions(operator, firstDigit, secondDigit, howMany, changeId) {\n    let firstNumbers = 0;\n    let firstStart = 0;\n    let secondNumbers = 0;\n    let secondStart = 0;\n\n    if (firstDigit === 1) {\n      firstNumbers = 9;\n      firstStart = 1;\n    } else if (firstDigit === 2) {\n      firstNumbers = 90;\n      firstStart = 10;\n    } else if (firstDigit === 3) {\n      firstNumbers = 900;\n      firstStart = 100;\n    } \n\n    if (secondDigit === 1) {\n      secondNumbers = 9;\n      secondStart = 1;\n    } else if (secondDigit === 2) {\n      secondNumbers = 90;\n      secondStart = 10;\n    } else if (secondDigit === 3) {\n      secondNumbers = 900;\n      secondStart = 100;\n    } \n\n    let questions = [];\n    for (let i = 1; i <= howMany; i++) {\n      let aQuestion = {};\n      let switchNumber = 0;\n      let firstNum = Math.floor(Math.random() * firstNumbers) + firstStart; \n      let secondNum = Math.floor(Math.random() * secondNumbers) + secondStart;\n      if (operator === '-' && firstNum < secondNum) {\n        switchNumber = firstNum;\n        firstNum = secondNum;\n        secondNum = switchNumber;\n      }\n\n      let answer = 0;\n      switch (operator) {\n        case '+':\n          answer = firstNum + secondNum;\n          break;\n        case '-':\n          answer = firstNum - secondNum;\n          break;\n        case 'x':\n          answer = firstNum * secondNum;\n          break;\n        default:\n          console.log('Sorry, please pick a valid operator!');\n      }\n      if (howMany > 1) {\n        aQuestion.id = i;\n      } else {\n        aQuestion.id = changeId;\n      }\n      aQuestion.operator = operator;\n      aQuestion.firstNum = firstNum; \n      aQuestion.secondNum = secondNum;  \n      aQuestion.answer = answer;\n      aQuestion.firstDigit = firstDigit;\n      aQuestion.secondDigit = secondDigit;\n      questions.push(aQuestion);\n    }\n    if (howMany > 1) {\n      this.setState( {questions: questions} );\n    } \n    else {\n      let updateQuestions = [...this.state.questions];\n      let updateIndex = changeId - 1;\n      updateQuestions.splice(updateIndex, 1, questions[0]);\n      this.setState( {questions: updateQuestions} );\n    }\n  }\n\n  render() {\n    const { generateQuestions } = this;\n    const { questions } = this.state;\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Noah's Math Questions</h1>\n          <Selections generateQuestions = {generateQuestions}/>\n        </header>\n        <Questions questions = {questions} generateQuestions = {generateQuestions}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}